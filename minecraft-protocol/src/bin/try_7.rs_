use std::{collections::HashMap, sync::Weak};

use minecraft_data::{FromMCDataVersionDir, FromVersion};
use protodef::{Natives, RustType, Type, TypeResult, ProtoDefError};
use serde::Deserialize;
use serde_json::Value;

#[derive(Deserialize)]
struct Thing(protodef::JsonNamespace);

impl FromMCDataVersionDir for Thing {
    const MODULE_NAME: &'static str = "protocol";
    const FILE_NAME: &'static str = "protocol.json";
}

fn main() {
    let Thing(json_ns) = FromVersion::from_version("1.12.2").unwrap();

    let mut natives: Natives = HashMap::default();
    natives.insert("bitfield", bitfield);
    natives.insert("array", array);
    natives.insert("i64", bitfield);
    natives.insert("void", array);
    natives.insert("entityMetadataLoop", bitfield);
    natives.insert("pstring", array);
    natives.insert("f32", bitfield);
    natives.insert("i8", array);
    natives.insert("i32", bitfield);
    natives.insert("u8", u8);
    natives.insert("varint", bitfield);
    natives.insert("switch", array);
    natives.insert("container", bitfield);
    natives.insert("option", array);
    natives.insert("nbt", bitfield);
    natives.insert("f64", array);
    natives.insert("restBuffer", bitfield);
    natives.insert("bool", array);
    natives.insert("buffer", bitfield);
    natives.insert("i16", array);
    natives.insert("optionalNbt", bitfield);
    natives.insert("u16", array);
    natives.insert("UUID", bitfield);

    let thing: Result<protodef::Namespace, _> = TryFrom::try_from((json_ns, &natives, Weak::new()));

    println!("{:#?}", thing);
}

fn bitfield<'a>(_: Option<&Value>) -> TypeResult<'a> {
    Ok(Type::Single(RustType::Native {
        aliasing: quote::quote! {
            called bitfield
        },
    }))
}
fn array<'a>(_: Option<&Value>) -> TypeResult<'a> {
    Ok(Type::Single(RustType::Native {
        aliasing: quote::quote! {
            called array
        },
    }))
}

fn u8<'a>(no_opts: Option<&Value>) -> TypeResult<'a> {
    if no_opts.is_some() {
        return Err(ProtoDefError::SuppliedArgumentsTakesNone("u8".to_string()));
    }
    Ok(Type::Single(RustType::Native { aliasing: quote::quote! {u8} }))
}
